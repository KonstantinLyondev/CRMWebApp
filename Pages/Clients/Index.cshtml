@page
@model CRMWebApp.Pages.Clients.IndexModel
@{
    ViewData["Title"] = "Clients";
}

@section Styles {
    <style>
        .table-nowrap th,
        .table-nowrap td {
            white-space: nowrap;
        }

        .truncate-160, .truncate-200, .truncate-240, .truncate-280 {
            display: inline-block;
            vertical-align: bottom;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .truncate-160 {
            max-width: 160px;
        }

        .truncate-200 {
            max-width: 200px;
        }

        .truncate-240 {
            max-width: 240px;
        }

        .truncate-280 {
            max-width: 280px;
        }

        .actions-col {
            width: 260px;
        }

        .btn {
            white-space: nowrap;
        }
    </style>
}

<div class="container mt-4">
    <h1 class="mb-4">Clients</h1>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (User.IsInRole("Admin"))
    {
        <div class="d-flex align-items-center gap-2 mb-3">
            <a asp-page="./Index" asp-route-scope="all"
               class="btn @(Model.Scope == "all" ? "btn-primary" : "btn-outline-primary")">All</a>

            <a asp-page="./Index" asp-route-scope="created"
               class="btn @(Model.Scope == "created" ? "btn-primary" : "btn-outline-primary")">Created by me</a>
        </div>
    }

    <div class="mb-3">
        <a asp-page="./Create" class="btn btn-success">Create New Client</a>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="d-flex align-items-center">
                <label class="me-2 fw-semibold">Sort by:</label>
                <select name="sortOrder" class="form-select" style="width: 220px;">
                    <option value="">-- Default --</option>
                    <option value="Name" selected="@(Model.CurrentSort == "Name")">Name A–Z</option>
                    <option value="Name_desc" selected="@(Model.CurrentSort == "Name_desc")">Name Z–A</option>
                    <option value="VipOnly" selected="@(Model.CurrentSort == "VipOnly")">VIP only</option>
                </select>
            </div>
        </div>

        <div class="col-md-6">
            <input id="searchInput" class="form-control" placeholder="Search by name..." />
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-striped table-hover table-bordered align-middle table-nowrap">
            <thead class="table-light">
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>City</th>
                    <th>Address</th>
                    <th>Company</th>
                    <th>VIP</th>
                    <th class="actions-col">Actions</th>
                </tr>
            </thead>
            <tbody id="clientTableBody">
                @await Html.PartialAsync("_ClientRows", Model.Rows)
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        const input = document.getElementById('searchInput');
        const sortDropdown = document.querySelector('select[name="sortOrder"]');
        const scope = '@Model.Scope';

        function doFilter() {
            const query = input.value || "";
            const sort  = sortDropdown.value || "";

            fetch(`/Clients?handler=Filter&query=${encodeURIComponent(query)}&sortOrder=${encodeURIComponent(sort)}&scope=${encodeURIComponent(scope)}`)
                .then(r => r.text())
                .then(html => {
                    document.getElementById('clientTableBody').innerHTML = html;
                });
        }

        input.addEventListener('input', doFilter);
        sortDropdown.addEventListener('change', doFilter);

        window.addEventListener('DOMContentLoaded', () => {
            if (sortDropdown.value) doFilter();

            const alert = document.querySelector('.alert.alert-success');
            if (alert) {
                alert.style.transition = "opacity .6s ease, margin .6s ease, height .6s ease, padding .6s ease";
                setTimeout(() => {
                    alert.style.opacity = '0';
                    alert.style.margin = '0';
                    alert.style.height = '0';
                    alert.style.padding = '0';
                    alert.style.overflow = 'hidden';
                    setTimeout(() => alert.remove(), 600);
                }, 4000);
            }
        });
    </script>
}
